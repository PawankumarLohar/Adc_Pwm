

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Apr 29 18:36:56 2023

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	10LF322
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.05
    20                           ; Generated 20/12/2018 GMT
    21                           ; 
    22                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC10LF322 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0020                     	;# 
    88  0020                     	;# 
    89  0021                     	;# 
    90  0022                     	;# 
    91  0022                     	;# 
    92  0023                     	;# 
    93  0024                     	;# 
    94  0025                     	;# 
    95  0026                     	;# 
    96  0027                     	;# 
    97  0027                     	;# 
    98  0028                     	;# 
    99  0029                     	;# 
   100  002A                     	;# 
   101  002A                     	;# 
   102  002B                     	;# 
   103  002C                     	;# 
   104  002D                     	;# 
   105  002E                     	;# 
   106  0030                     	;# 
   107  0031                     	;# 
   108  0032                     	;# 
   109  0033                     	;# 
   110  0034                     	;# 
   111  0035                     	;# 
   112  0036                     	;# 
   113  0037                     	;# 
   114  0038                     	;# 
   115  0039                     	;# 
   116  003A                     	;# 
   117  003B                     	;# 
   118  003C                     	;# 
   119  003D                     	;# 
   120  003E                     	;# 
   121  003F                     	;# 
   122  0019                     _PWM2CONbits	set	25
   123  0013                     _T2CONbits	set	19
   124  0012                     _PR2	set	18
   125  0019                     _PWM2CON	set	25
   126  0039                     _CWG1CON0	set	57
   127  0031                     _CLC1CON	set	49
   128  000B                     _INTCONbits	set	11
   129  000D                     _PIE1bits	set	13
   130  0009                     _WPUA	set	9
   131  0008                     _ANSELAbits	set	8
   132  0010                     _OSCCON	set	16
   133  0006                     _TRISAbits	set	6
   134  0017                     _PWM2DCL	set	23
   135  0018                     _PWM2DCH	set	24
   136  001E                     _ADRES	set	30
   137  001F                     _ADCONbits	set	31
   138  000C                     _PIR1bits	set	12
   139                           
   140                           ; #config settings
   141  0000                     
   142                           	psect	cinit
   143  000B                     start_initialization:	
   144  000B                     __initialization:	
   145                           
   146                           ; Clear objects allocated to BANK0
   147  000B  01C6               	clrf	__pbssBANK0& (0+127)
   148  000C  01C7               	clrf	(__pbssBANK0+1)& (0+127)
   149  000D  01C8               	clrf	(__pbssBANK0+2)& (0+127)
   150  000E  01C9               	clrf	(__pbssBANK0+3)& (0+127)
   151  000F  01CA               	clrf	(__pbssBANK0+4)& (0+127)
   152  0010                     end_of_initialization:	
   153                           ;End of C runtime variable initialization code
   154                           
   155  0010                     __end_of__initialization:	
   156  0010  0183               	clrf	3
   157  0011  287E               	ljmp	_main	;jump to C main() function
   158                           
   159                           	psect	bssBANK0
   160  0046                     __pbssBANK0:	
   161  0046                     _Sum:	
   162  0046                     	ds	4
   163  004A                     _Counter:	
   164  004A                     	ds	1
   165                           
   166                           	psect	cstackCOMMON
   167  0000                     __pcstackCOMMON:	
   168  0000                     ??_ClockConfig:	
   169  0000                     ??_ConfigAdcPins:	
   170                           ; 1 bytes @ 0x0
   171                           
   172  0000                     ??_ConfigAdcModule:	
   173                           ; 1 bytes @ 0x0
   174                           
   175  0000                     ??_ConfigAdcInterrupt:	
   176                           ; 1 bytes @ 0x0
   177                           
   178  0000                     ??_StartConverion:	
   179                           ; 1 bytes @ 0x0
   180                           
   181  0000                     ??_ConfigPwm:	
   182                           ; 1 bytes @ 0x0
   183                           
   184  0000                     ??_main:	
   185                           ; 1 bytes @ 0x0
   186                           
   187                           
   188                           	psect	cstackBANK0
   189  0040                     __pcstackBANK0:	
   190                           ; 1 bytes @ 0x0
   191                           
   192  0040                     ?_ClockConfig:	
   193  0040                     ?_ConfigAdcPins:	
   194                           ; 1 bytes @ 0x0
   195                           
   196  0040                     ?_ConfigAdcModule:	
   197                           ; 1 bytes @ 0x0
   198                           
   199  0040                     ?_ConfigAdcInterrupt:	
   200                           ; 1 bytes @ 0x0
   201                           
   202  0040                     ?_StartConverion:	
   203                           ; 1 bytes @ 0x0
   204                           
   205  0040                     ?_ConfigPwm:	
   206                           ; 1 bytes @ 0x0
   207                           
   208  0040                     ?_isr_routine:	
   209                           ; 1 bytes @ 0x0
   210                           
   211  0040                     ??_isr_routine:	
   212                           ; 1 bytes @ 0x0
   213                           
   214  0040                     ?_main:	
   215                           ; 1 bytes @ 0x0
   216                           
   217                           
   218                           ; 2 bytes @ 0x0
   219  0040                     	ds	6
   220                           
   221                           	psect	maintext
   222  007E                     __pmaintext:	
   223 ;;
   224 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   225 ;;
   226 ;; *************** function _main *****************
   227 ;; Defined at:
   228 ;;		line 56 in file "main.c"
   229 ;; Parameters:    Size  Location     Type
   230 ;;		None
   231 ;; Auto vars:     Size  Location     Type
   232 ;;		None
   233 ;; Return value:  Size  Location     Type
   234 ;;                  2   61[None  ] int 
   235 ;; Registers used:
   236 ;;		wreg, status,2, status,0, pclath, cstack
   237 ;; Tracked objects:
   238 ;;		On entry : B00/0
   239 ;;		On exit  : 0/0
   240 ;;		Unchanged: 0/0
   241 ;; Data sizes:     COMMON   BANK0
   242 ;;      Params:         0       0
   243 ;;      Locals:         0       0
   244 ;;      Temps:          0       0
   245 ;;      Totals:         0       0
   246 ;;Total ram usage:        0 bytes
   247 ;; Hardware stack levels required when called:    2
   248 ;; This function calls:
   249 ;;		_ClockConfig
   250 ;;		_ConfigAdcInterrupt
   251 ;;		_ConfigAdcModule
   252 ;;		_ConfigAdcPins
   253 ;;		_ConfigPwm
   254 ;;		_StartConverion
   255 ;; This function is called by:
   256 ;;		Startup code after reset
   257 ;; This function uses a non-reentrant model
   258 ;;
   259                           
   260                           
   261                           ;psect for function _main
   262  007E                     _main:	
   263                           
   264                           ;main.c: 58:     ClockConfig();
   265                           
   266                           ;incstack = 0
   267                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   268  007E  2097               	fcall	_ClockConfig
   269                           
   270                           ;main.c: 59:     TRISAbits.TRISA2 = 0;
   271  007F  1106               	bcf	6,2	;volatile
   272                           
   273                           ;main.c: 60:     ConfigAdcPins();
   274  0080  2093               	fcall	_ConfigAdcPins
   275                           
   276                           ;main.c: 61:     ConfigAdcModule();
   277  0081  2086               	fcall	_ConfigAdcModule
   278                           
   279                           ;main.c: 62:     ConfigAdcInterrupt();
   280  0082  208E               	fcall	_ConfigAdcInterrupt
   281                           
   282                           ;main.c: 63:     StartConverion();
   283  0083  209A               	fcall	_StartConverion
   284                           
   285                           ;main.c: 64:     ConfigPwm();
   286  0084  206E               	fcall	_ConfigPwm
   287  0085                     l62:	
   288                           ;main.c: 66:     while(1)
   289                           
   290                           
   291                           ;main.c: 67:     {;main.c: 68:     }
   292  0085  2885               	goto	l62
   293  0086                     __end_of_main:	
   294                           
   295                           	psect	text1
   296  009A                     __ptext1:	
   297 ;; *************** function _StartConverion *****************
   298 ;; Defined at:
   299 ;;		line 105 in file "main.c"
   300 ;; Parameters:    Size  Location     Type
   301 ;;		None
   302 ;; Auto vars:     Size  Location     Type
   303 ;;		None
   304 ;; Return value:  Size  Location     Type
   305 ;;                  1    wreg      void 
   306 ;; Registers used:
   307 ;;		None
   308 ;; Tracked objects:
   309 ;;		On entry : 0/0
   310 ;;		On exit  : 0/0
   311 ;;		Unchanged: 0/0
   312 ;; Data sizes:     COMMON   BANK0
   313 ;;      Params:         0       0
   314 ;;      Locals:         0       0
   315 ;;      Temps:          0       0
   316 ;;      Totals:         0       0
   317 ;;Total ram usage:        0 bytes
   318 ;; Hardware stack levels used:    1
   319 ;; Hardware stack levels required when called:    1
   320 ;; This function calls:
   321 ;;		Nothing
   322 ;; This function is called by:
   323 ;;		_main
   324 ;; This function uses a non-reentrant model
   325 ;;
   326                           
   327                           
   328                           ;psect for function _StartConverion
   329  009A                     _StartConverion:	
   330                           
   331                           ;main.c: 107:     ADCONbits.GO_nDONE = 1;
   332                           
   333                           ;incstack = 0
   334                           ; Regs used in _StartConverion: []
   335  009A  149F               	bsf	31,1	;volatile
   336  009B  0008               	return
   337  009C                     __end_of_StartConverion:	
   338                           
   339                           	psect	text2
   340  006E                     __ptext2:	
   341 ;; *************** function _ConfigPwm *****************
   342 ;; Defined at:
   343 ;;		line 115 in file "main.c"
   344 ;; Parameters:    Size  Location     Type
   345 ;;		None
   346 ;; Auto vars:     Size  Location     Type
   347 ;;		None
   348 ;; Return value:  Size  Location     Type
   349 ;;                  1    wreg      void 
   350 ;; Registers used:
   351 ;;		wreg, status,2
   352 ;; Tracked objects:
   353 ;;		On entry : 0/0
   354 ;;		On exit  : 0/0
   355 ;;		Unchanged: 0/0
   356 ;; Data sizes:     COMMON   BANK0
   357 ;;      Params:         0       0
   358 ;;      Locals:         0       0
   359 ;;      Temps:          0       0
   360 ;;      Totals:         0       0
   361 ;;Total ram usage:        0 bytes
   362 ;; Hardware stack levels used:    1
   363 ;; Hardware stack levels required when called:    1
   364 ;; This function calls:
   365 ;;		Nothing
   366 ;; This function is called by:
   367 ;;		_main
   368 ;; This function uses a non-reentrant model
   369 ;;
   370                           
   371                           
   372                           ;psect for function _ConfigPwm
   373  006E                     _ConfigPwm:	
   374                           
   375                           ;main.c: 117:     CLC1CON = 0x00;
   376                           
   377                           ;incstack = 0
   378                           ; Regs used in _ConfigPwm: [wreg+status,2]
   379  006E  01B1               	clrf	49	;volatile
   380                           
   381                           ;main.c: 118:     CWG1CON0 = 0x00;
   382  006F  01B9               	clrf	57	;volatile
   383                           
   384                           ;main.c: 119:     TRISAbits.TRISA1 = 1;
   385  0070  1486               	bsf	6,1	;volatile
   386                           
   387                           ;main.c: 120:     PWM2CON = 0x00;
   388  0071  0199               	clrf	25	;volatile
   389                           
   390                           ;main.c: 121:     PR2 = 56;
   391  0072  3038               	movlw	56
   392  0073  0092               	movwf	18	;volatile
   393                           
   394                           ;main.c: 122:     PWM2DCH = 0x00;
   395  0074  0198               	clrf	24	;volatile
   396                           
   397                           ;main.c: 123:     PWM2DCL = 0x00;
   398  0075  0197               	clrf	23	;volatile
   399                           
   400                           ;main.c: 126:     PIR1bits.TMR2IF = 0;
   401  0076  108C               	bcf	12,1	;volatile
   402                           
   403                           ;main.c: 127:     T2CONbits.T2CKPS1 = 0;
   404  0077  1093               	bcf	19,1	;volatile
   405                           
   406                           ;main.c: 128:     T2CONbits.T2CKPS0 = 0;
   407  0078  1013               	bcf	19,0	;volatile
   408                           
   409                           ;main.c: 130:     T2CONbits.TMR2ON = 1;
   410  0079  1513               	bsf	19,2	;volatile
   411                           
   412                           ;main.c: 131:     TRISAbits.TRISA1 = 0;
   413  007A  1086               	bcf	6,1	;volatile
   414                           
   415                           ;main.c: 132:     PWM2CONbits.PWM2EN = 1;
   416  007B  1799               	bsf	25,7	;volatile
   417                           
   418                           ;main.c: 133:     PWM2CONbits.PWM2OE = 1;
   419  007C  1719               	bsf	25,6	;volatile
   420  007D  0008               	return
   421  007E                     __end_of_ConfigPwm:	
   422                           
   423                           	psect	text3
   424  0093                     __ptext3:	
   425 ;; *************** function _ConfigAdcPins *****************
   426 ;; Defined at:
   427 ;;		line 77 in file "main.c"
   428 ;; Parameters:    Size  Location     Type
   429 ;;		None
   430 ;; Auto vars:     Size  Location     Type
   431 ;;		None
   432 ;; Return value:  Size  Location     Type
   433 ;;                  1    wreg      void 
   434 ;; Registers used:
   435 ;;		status,2
   436 ;; Tracked objects:
   437 ;;		On entry : 0/0
   438 ;;		On exit  : 0/0
   439 ;;		Unchanged: 0/0
   440 ;; Data sizes:     COMMON   BANK0
   441 ;;      Params:         0       0
   442 ;;      Locals:         0       0
   443 ;;      Temps:          0       0
   444 ;;      Totals:         0       0
   445 ;;Total ram usage:        0 bytes
   446 ;; Hardware stack levels used:    1
   447 ;; Hardware stack levels required when called:    1
   448 ;; This function calls:
   449 ;;		Nothing
   450 ;; This function is called by:
   451 ;;		_main
   452 ;; This function uses a non-reentrant model
   453 ;;
   454                           
   455                           
   456                           ;psect for function _ConfigAdcPins
   457  0093                     _ConfigAdcPins:	
   458                           
   459                           ;main.c: 79:     TRISAbits.TRISA0 = 1;
   460                           
   461                           ;incstack = 0
   462                           ; Regs used in _ConfigAdcPins: [status,2]
   463  0093  1406               	bsf	6,0	;volatile
   464                           
   465                           ;main.c: 80:     ANSELAbits.ANSA0 = 1;
   466  0094  1408               	bsf	8,0	;volatile
   467                           
   468                           ;main.c: 81:     WPUA = 0x00;
   469  0095  0189               	clrf	9	;volatile
   470  0096  0008               	return
   471  0097                     __end_of_ConfigAdcPins:	
   472                           
   473                           	psect	text4
   474  0086                     __ptext4:	
   475 ;; *************** function _ConfigAdcModule *****************
   476 ;; Defined at:
   477 ;;		line 84 in file "main.c"
   478 ;; Parameters:    Size  Location     Type
   479 ;;		None
   480 ;; Auto vars:     Size  Location     Type
   481 ;;		None
   482 ;; Return value:  Size  Location     Type
   483 ;;                  1    wreg      void 
   484 ;; Registers used:
   485 ;;		None
   486 ;; Tracked objects:
   487 ;;		On entry : 0/0
   488 ;;		On exit  : 0/0
   489 ;;		Unchanged: 0/0
   490 ;; Data sizes:     COMMON   BANK0
   491 ;;      Params:         0       0
   492 ;;      Locals:         0       0
   493 ;;      Temps:          0       0
   494 ;;      Totals:         0       0
   495 ;;Total ram usage:        0 bytes
   496 ;; Hardware stack levels used:    1
   497 ;; Hardware stack levels required when called:    1
   498 ;; This function calls:
   499 ;;		Nothing
   500 ;; This function is called by:
   501 ;;		_main
   502 ;; This function uses a non-reentrant model
   503 ;;
   504                           
   505                           
   506                           ;psect for function _ConfigAdcModule
   507  0086                     _ConfigAdcModule:	
   508                           
   509                           ;main.c: 86:     ADCONbits.ADCS0 = 1;
   510                           
   511                           ;incstack = 0
   512                           ; Regs used in _ConfigAdcModule: []
   513  0086  169F               	bsf	31,5	;volatile
   514                           
   515                           ;main.c: 87:     ADCONbits.ADCS1 = 0;
   516  0087  131F               	bcf	31,6	;volatile
   517                           
   518                           ;main.c: 88:     ADCONbits.ADCS2 = 0;
   519  0088  139F               	bcf	31,7	;volatile
   520                           
   521                           ;main.c: 90:     ADCONbits.CHS2 = 0;
   522  0089  121F               	bcf	31,4	;volatile
   523                           
   524                           ;main.c: 91:     ADCONbits.CHS1 = 0;
   525  008A  119F               	bcf	31,3	;volatile
   526                           
   527                           ;main.c: 92:     ADCONbits.CHS0 = 0;
   528  008B  111F               	bcf	31,2	;volatile
   529                           
   530                           ;main.c: 94:     ADCONbits.ADON = 1;
   531  008C  141F               	bsf	31,0	;volatile
   532  008D  0008               	return
   533  008E                     __end_of_ConfigAdcModule:	
   534                           
   535                           	psect	text5
   536  008E                     __ptext5:	
   537 ;; *************** function _ConfigAdcInterrupt *****************
   538 ;; Defined at:
   539 ;;		line 97 in file "main.c"
   540 ;; Parameters:    Size  Location     Type
   541 ;;		None
   542 ;; Auto vars:     Size  Location     Type
   543 ;;		None
   544 ;; Return value:  Size  Location     Type
   545 ;;                  1    wreg      void 
   546 ;; Registers used:
   547 ;;		None
   548 ;; Tracked objects:
   549 ;;		On entry : 0/0
   550 ;;		On exit  : 0/0
   551 ;;		Unchanged: 0/0
   552 ;; Data sizes:     COMMON   BANK0
   553 ;;      Params:         0       0
   554 ;;      Locals:         0       0
   555 ;;      Temps:          0       0
   556 ;;      Totals:         0       0
   557 ;;Total ram usage:        0 bytes
   558 ;; Hardware stack levels used:    1
   559 ;; Hardware stack levels required when called:    1
   560 ;; This function calls:
   561 ;;		Nothing
   562 ;; This function is called by:
   563 ;;		_main
   564 ;; This function uses a non-reentrant model
   565 ;;
   566                           
   567                           
   568                           ;psect for function _ConfigAdcInterrupt
   569  008E                     _ConfigAdcInterrupt:	
   570                           
   571                           ;main.c: 99:     PIR1bits.ADIF = 0;
   572                           
   573                           ;incstack = 0
   574                           ; Regs used in _ConfigAdcInterrupt: []
   575  008E  130C               	bcf	12,6	;volatile
   576                           
   577                           ;main.c: 100:     PIE1bits.ADIE = 1;
   578  008F  170D               	bsf	13,6	;volatile
   579                           
   580                           ;main.c: 101:     INTCONbits.PEIE = 1;
   581  0090  170B               	bsf	11,6	;volatile
   582                           
   583                           ;main.c: 102:     INTCONbits.GIE = 1;
   584  0091  178B               	bsf	11,7	;volatile
   585  0092  0008               	return
   586  0093                     __end_of_ConfigAdcInterrupt:	
   587                           
   588                           	psect	text6
   589  0097                     __ptext6:	
   590 ;; *************** function _ClockConfig *****************
   591 ;; Defined at:
   592 ;;		line 72 in file "main.c"
   593 ;; Parameters:    Size  Location     Type
   594 ;;		None
   595 ;; Auto vars:     Size  Location     Type
   596 ;;		None
   597 ;; Return value:  Size  Location     Type
   598 ;;                  1    wreg      void 
   599 ;; Registers used:
   600 ;;		wreg
   601 ;; Tracked objects:
   602 ;;		On entry : 0/0
   603 ;;		On exit  : 0/0
   604 ;;		Unchanged: 0/0
   605 ;; Data sizes:     COMMON   BANK0
   606 ;;      Params:         0       0
   607 ;;      Locals:         0       0
   608 ;;      Temps:          0       0
   609 ;;      Totals:         0       0
   610 ;;Total ram usage:        0 bytes
   611 ;; Hardware stack levels used:    1
   612 ;; Hardware stack levels required when called:    1
   613 ;; This function calls:
   614 ;;		Nothing
   615 ;; This function is called by:
   616 ;;		_main
   617 ;; This function uses a non-reentrant model
   618 ;;
   619                           
   620                           
   621                           ;psect for function _ClockConfig
   622  0097                     _ClockConfig:	
   623                           
   624                           ;main.c: 74:     OSCCON = 0x70;
   625                           
   626                           ;incstack = 0
   627                           ; Regs used in _ClockConfig: [wreg]
   628  0097  3070               	movlw	112
   629  0098  0090               	movwf	16	;volatile
   630  0099  0008               	return
   631  009A                     __end_of_ClockConfig:	
   632                           
   633                           	psect	text7
   634  0012                     __ptext7:	
   635 ;; *************** function _isr_routine *****************
   636 ;; Defined at:
   637 ;;		line 36 in file "main.c"
   638 ;; Parameters:    Size  Location     Type
   639 ;;		None
   640 ;; Auto vars:     Size  Location     Type
   641 ;;		None
   642 ;; Return value:  Size  Location     Type
   643 ;;                  1    wreg      void 
   644 ;; Registers used:
   645 ;;		wreg, status,2, status,0
   646 ;; Tracked objects:
   647 ;;		On entry : 0/0
   648 ;;		On exit  : 0/0
   649 ;;		Unchanged: 0/0
   650 ;; Data sizes:     COMMON   BANK0
   651 ;;      Params:         0       0
   652 ;;      Locals:         0       0
   653 ;;      Temps:          0       6
   654 ;;      Totals:         0       6
   655 ;;Total ram usage:        6 bytes
   656 ;; Hardware stack levels used:    1
   657 ;; This function calls:
   658 ;;		Nothing
   659 ;; This function is called by:
   660 ;;		Interrupt level 1
   661 ;; This function uses a non-reentrant model
   662 ;;
   663                           
   664                           
   665                           ;psect for function _isr_routine
   666  0012                     _isr_routine:	
   667                           
   668                           ;main.c: 39:     if(PIR1bits.ADIF == 1)
   669  0012  1F0C               	btfss	12,6	;volatile
   670  0013  2867               	goto	i1l57
   671                           
   672                           ;main.c: 40:     {;main.c: 42:         PIR1bits.ADIF = 0;
   673  0014  130C               	bcf	12,6	;volatile
   674                           
   675                           ;main.c: 43:         ADCONbits.GO_nDONE = 1;
   676  0015  149F               	bsf	31,1	;volatile
   677                           
   678                           ;main.c: 44:         Counter++;
   679  0016  3001               	movlw	1
   680  0017  00C0               	movwf	??_isr_routine
   681  0018  0840               	movf	??_isr_routine,w
   682  0019  07CA               	addwf	_Counter,f
   683                           
   684                           ;main.c: 45:         Sum += ADRES;
   685  001A  081E               	movf	30,w	;volatile
   686  001B  00C0               	movwf	??_isr_routine
   687  001C  01C1               	clrf	??_isr_routine+1
   688  001D  01C2               	clrf	??_isr_routine+2
   689  001E  01C3               	clrf	??_isr_routine+3
   690  001F  0840               	movf	??_isr_routine,w
   691  0020  07C6               	addwf	_Sum,f
   692  0021  0841               	movf	??_isr_routine+1,w
   693  0022  1103               	clrz
   694  0023  1803               	skipnc
   695  0024  3E01               	addlw	1
   696  0025  1D03               	btfss	3,2
   697  0026  07C7               	addwf	_Sum+1,f
   698  0027  0842               	movf	??_isr_routine+2,w
   699  0028  1103               	clrz
   700  0029  1803               	skipnc
   701  002A  3E01               	addlw	1
   702  002B  1D03               	btfss	3,2
   703  002C  07C8               	addwf	_Sum+2,f
   704  002D  0843               	movf	??_isr_routine+3,w
   705  002E  1103               	clrz
   706  002F  1803               	skipnc
   707  0030  3E01               	addlw	1
   708  0031  1D03               	btfss	3,2
   709  0032  07C9               	addwf	_Sum+3,f
   710                           
   711                           ;main.c: 46:             if(Counter==254)
   712  0033  30FE               	movlw	254
   713  0034  064A               	xorwf	_Counter,w
   714  0035  1D03               	btfss	3,2
   715  0036  2867               	goto	i1l57
   716                           
   717                           ;main.c: 47:             {;main.c: 48:                 Sum = Sum >> 4;
   718  0037  0846               	movf	_Sum,w
   719  0038  00C0               	movwf	??_isr_routine
   720  0039  0847               	movf	_Sum+1,w
   721  003A  00C1               	movwf	??_isr_routine+1
   722  003B  0848               	movf	_Sum+2,w
   723  003C  00C2               	movwf	??_isr_routine+2
   724  003D  0849               	movf	_Sum+3,w
   725  003E  00C3               	movwf	??_isr_routine+3
   726  003F  3004               	movlw	4
   727  0040                     u9_25:	
   728  0040  1003               	clrc
   729  0041  0CC3               	rrf	??_isr_routine+3,f
   730  0042  0CC2               	rrf	??_isr_routine+2,f
   731  0043  0CC1               	rrf	??_isr_routine+1,f
   732  0044  0CC0               	rrf	??_isr_routine,f
   733  0045  3EFF               	addlw	-1
   734  0046  1D03               	skipz
   735  0047  2840               	goto	u9_25
   736  0048  0843               	movf	??_isr_routine+3,w
   737  0049  00C9               	movwf	_Sum+3
   738  004A  0842               	movf	??_isr_routine+2,w
   739  004B  00C8               	movwf	_Sum+2
   740  004C  0841               	movf	??_isr_routine+1,w
   741  004D  00C7               	movwf	_Sum+1
   742  004E  0840               	movf	??_isr_routine,w
   743  004F  00C6               	movwf	_Sum
   744                           
   745                           ;main.c: 49:                 PWM2DCH = Sum >> 2 ;
   746  0050  0846               	movf	_Sum,w
   747  0051  00C0               	movwf	??_isr_routine
   748  0052  0847               	movf	_Sum+1,w
   749  0053  00C1               	movwf	??_isr_routine+1
   750  0054  0848               	movf	_Sum+2,w
   751  0055  00C2               	movwf	??_isr_routine+2
   752  0056  0849               	movf	_Sum+3,w
   753  0057  00C3               	movwf	??_isr_routine+3
   754  0058  3002               	movlw	2
   755  0059                     u10_25:	
   756  0059  1003               	clrc
   757  005A  0CC3               	rrf	??_isr_routine+3,f
   758  005B  0CC2               	rrf	??_isr_routine+2,f
   759  005C  0CC1               	rrf	??_isr_routine+1,f
   760  005D  0CC0               	rrf	??_isr_routine,f
   761  005E  3EFF               	addlw	-1
   762  005F  1D03               	skipz
   763  0060  2859               	goto	u10_25
   764  0061  0840               	movf	??_isr_routine,w
   765  0062  0098               	movwf	24	;volatile
   766                           
   767                           ;main.c: 50:                 PWM2DCL = Sum & 0x0003;
   768  0063  0846               	movf	_Sum,w
   769  0064  3903               	andlw	3
   770  0065  0097               	movwf	23	;volatile
   771                           
   772                           ;main.c: 51:                 Counter = 0;
   773  0066  01CA               	clrf	_Counter
   774  0067                     i1l57:	
   775  0067  0845               	movf	??_isr_routine+5,w
   776  0068  008A               	movwf	10
   777  0069  0E44               	swapf	(??_isr_routine+4)^0,w
   778  006A  0083               	movwf	3
   779  006B  0EFE               	swapf	126,f
   780  006C  0E7E               	swapf	126,w
   781  006D  0009               	retfie
   782  006E                     __end_of_isr_routine:	
   783  007E                     btemp	set	126	;btemp
   784  007E                     wtemp0	set	126
   785                           
   786                           	psect	intentry
   787  0004                     __pintentry:	
   788                           ;incstack = 0
   789                           ; Regs used in _isr_routine: [wreg+status,2+status,0]
   790                           
   791  0004                     interrupt_function:	
   792  007E                     saved_w	set	btemp
   793  0004  00FE               	movwf	btemp
   794  0005  0E03               	swapf	3,w
   795  0006  00C4               	movwf	??_isr_routine+4
   796  0007  080A               	movf	10,w
   797  0008  00C5               	movwf	??_isr_routine+5
   798  0009  2812               	ljmp	_isr_routine


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62      6      11

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr_routine in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr_routine in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                        _ClockConfig
                 _ConfigAdcInterrupt
                    _ConfigAdcModule
                      _ConfigAdcPins
                          _ConfigPwm
                     _StartConverion
 ---------------------------------------------------------------------------------
 (1) _StartConverion                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigPwm                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigAdcPins                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigAdcModule                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigAdcInterrupt                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ClockConfig                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr_routine                                          6     6      0       0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClockConfig
   _ConfigAdcInterrupt
   _ConfigAdcModule
   _ConfigAdcPins
   _ConfigPwm
   _StartConverion

 _isr_routine (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
STACK                0      0       0       2        0.0%
BANK0               3E      6       B       3       17.7%
ABS                  0      0       B       4        0.0%
DATA                 0      0       B       5        0.0%
BITBANK0            3E      0       0       6        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Apr 29 18:36:56 2023

                __CFG_CP$OFF 0000                           l62 0085           _ConfigAdcInterrupt 008E  
                        _PR2 0012                          _Sum 0046                 __CFG_BORV$LO 0000  
        __end_of_ClockConfig 009A          ?_ConfigAdcInterrupt 0040                 __CFG_LVP$OFF 0000  
                       i1l57 0067                         _WPUA 0009                         u9_25 0040  
               __CFG_WRT$OFF 0000                         _main 007E                         btemp 007E  
                       start 000A         ??_ConfigAdcInterrupt 0000                        ?_main 0040  
                      _ADRES 001E                __CFG_WDTE$OFF 0000                        u10_25 0059  
             __CFG_BOREN$OFF 0000                        pclath 000A                        status 0003  
                      wtemp0 007E             ?_ConfigAdcModule 0040               __CFG_MCLRE$OFF 0000  
            __initialization 000B                 __end_of_main 0086               __CFG_LPBOR$OFF 0000  
                _ClockConfig 0097             ??_StartConverion 0000                       ??_main 0000  
               ?_isr_routine 0040           __size_of_ConfigPwm 0010                       _OSCCON 0010  
             __CFG_PWRTE$OFF 0000                       saved_w 007E        __end_of_ConfigAdcPins 0097  
    __end_of__initialization 0010            __end_of_ConfigPwm 007E               __pcstackCOMMON 0000  
                 __pbssBANK0 0046                   __pmaintext 007E                   __pintentry 0004  
                    _CLC1CON 0031         __size_of_isr_routine 005C                      _PWM2DCH 0018  
                    _PWM2DCL 0017                      _PWM2CON 0019                    _ADCONbits 001F  
                    _Counter 004A  __size_of_ConfigAdcInterrupt 0005                 ?_ClockConfig 0040  
                    __ptext1 009A                      __ptext2 006E                      __ptext3 0093  
                    __ptext4 0086                      __ptext5 008E                      __ptext6 0097  
                    __ptext7 0012                    _T2CONbits 0013         end_of_initialization 0010  
   __size_of_ConfigAdcModule 0008             __CFG_FOSC$INTOSC 0000                    _TRISAbits 0006  
                  _ConfigPwm 006E          start_initialization 000B      __size_of_StartConverion 0002  
                 ?_ConfigPwm 0040       __size_of_ConfigAdcPins 0004         __size_of_ClockConfig 0003  
                  ___latbits 0000                __pcstackBANK0 0040            ??_ConfigAdcModule 0000  
              ??_isr_routine 0040                     _CWG1CON0 0039            interrupt_function 0004  
              _ConfigAdcPins 0093   __end_of_ConfigAdcInterrupt 0093                     _PIE1bits 000D  
                   _PIR1bits 000C                  ??_ConfigPwm 0000          __end_of_isr_routine 006E  
             _StartConverion 009A               ?_ConfigAdcPins 0040                   _ANSELAbits 0008  
     __end_of_StartConverion 009C                __size_of_main 0008              _ConfigAdcModule 0086  
                _isr_routine 0012                   _INTCONbits 000B              ?_StartConverion 0040  
                _PWM2CONbits 0019              ??_ConfigAdcPins 0000                     intlevel1 0000  
              ??_ClockConfig 0000      __end_of_ConfigAdcModule 008E  
